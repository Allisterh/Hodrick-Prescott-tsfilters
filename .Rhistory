hat_mat <- tcrossprod(qr.Q(qr_X))
y_hat <- hat_mat%*%y_tplush
list(cycle=y_tplush - y_hat, # starting date is p + h - 1 :th observation of the original series y, for all series returned
trend=y_hat,
total=y_tplush,
beta=beta) # OLS coefficients for the regressors (y_{t},...,y_{t-p+1}, 1)
}
devtools::document()
remove("hfilter")
remove(INDPRO)
devtools::load_all()
data(INDPRO, package=tsfilter)
data(INDPRO, package="tsfilters")
y <- INDPRO
h=24
p=12
tmp <- matrix(1:3)
tmp
as.vector(tmp)
ts(tmp)
ts(as.vector(tmp))
is.matrix(1:3)
h %% 1
1.2 %% 1
4 %% 1
is.matrix(ts(tmp))
as.vector(ts(tmp))
ts.ts(tmp)
is.ts(tmp)
is.ts(ts(tmp))
?ts
y
dates(y)
date(y)
y_start <- start(y)
y_start
y_freq <- frequency(y)
y_freq
y_start <- start(y)
y_freq <- frequency(y)
y <- as.vector(y)
y
# Each row X is x_t', x_t=(y_{t},...,y_{t-p+1}, 1), first p values needed for the regressors,
# the last t+h is for the last observation
X <- t(vapply(p:(length(y) - h), function(t1) c(1, y[t1:(t1 - p + 1)]), numeric(p + 1)))
y_tplush <- y[-(1:(p - 1 + h))] # (p+h, p+h+1, ..., T-1, T)
# The OLS estimate of is then (X'X)^{-1}X'y_tplush - QR factorization is used to reduce numerical
# error in inverting X'X
qr_X <- qr(X)
beta <- c(backsolve(qr.R(qr_X), crossprod(qr.Q(qr_X), y_tplush))) # qr.solve(X, y_tplush), solve(crossprod(X))%*%crossprod(X, y_tplush)
hat_mat <- tcrossprod(qr.Q(qr_X)) # Hat matrix
y_hat <- hat_mat%*%y_tplush
y_hat
# Calculate the new start time for the trend and cyclical components
steps_back <- h + p + 1
steps_back
mod
13 %/% 5
13 %/% 4
y_start
ts(tmp)
start(ts(tmp))
years_back <- steps_back %/% y_freq
years_back
steps_back
minors_back <- steps_back %% y_freq
minors_back
new_start <- y_start - c(years_back, minors_back)
new_start
if(new_start[2] == 1)
1
new_start[2] == 0
new_start <- c(new_start[1] - 1, y_freq - 1)
new_start
data(INDPRO, package="tsfilters")
## Obtain the cyclical component of industrial production
IP <- window(INDPRO, start=c(1951, 8)) # Start time at c(1954, 7), take h + p - 1 months back
IP_filtered <-hfilter(IP, h=24, p=12)
start(IP_filtered$cycle)
start(INDPRO)
start(IP)
devtools::load_all()
devtools::load_all()
IP_filtered <-hfilter(IP, h=24, p=12)
start(IP_filtered$cycle)
devtools::load_all()
IP_filtered <-hfilter(IP, h=24, p=12)
start(IP_filtered$cycle)
start(IP)
y <- IP
# Store properties of the original series
y_start <- start(y)
y_freq <- frequency(y)
y <- as.vector(y)
y_start
devtools::load_all()
IP_filtered <-hfilter(IP, h=24, p=12)
devtools::load_all()
IP_filtered <-hfilter(IP, h=24, p=12)
start(IP_filtered$cycle)
length(IP_filtered$cycle) - length(IP)
h + p -
1
h + p - 1
24 + 12 - 1
usethis::use_test("detrendfilters")
IP_filtered <- hfilter(INDPRO, h=24, p=12)
IP <- window(INDPRO, start=c(1951, 8)) # Start time at c(1954, 7), take h + p - 1 months back
IP_filtered <- hfilter(IP, h=24, p=12)
start(IP_filtered$cycle)
devtools::document()
devtools::test()
x <- IP_filtered
devtools::load_all()
IP_filtered
devtools::document()
devtools::document()
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
paste0("beta", 0:(x$p - 1))
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
str(format_value(x$beta))
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::document()
devtools::document()
devtools::load_all()
plot(IP_filtered)
devtools::load_all()
plot(IP_filtered)
devtools::load_all()
plot(IP_filtered)
devtools::document()
?hfilter
devtools::document()
devtools::document()
?hfilter
devtools::document()
?hfilter
devtools::document()
?hfilter
data(INDPRO, package="tsfilters")
IP_filtered <- hfilter(INDPRO, h=24, p=12)
IP_filtered
plot(IP_filtered)
devtools::document()
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
devtools::load_all()
IP_filtered
IP_filtered
plot(IP_filtered)
devtools::document()
devtools::test()
setwd("~/tsfilters")
usethis::use_readme_rmd()
setwd("~/Documents/tsfilters")
devtools::load_all()
INDPRO
plot(INDORO)
plot(INDPRO)
IP_filtered <- hfilter(INDPRO, h=24, p=12)
IP_filtered
plot(IP_filtered)
y <- INDPRO
# Store properties of the original series
y_start <- start(y)
y_freq <- frequency(y)
y <- as.vector(y)
y_start
get_new_start(y=1:20, y_start=c(1999, 12), y_freq=12, steps_forward=1)
devtools::load_all()
get_new_start(y=1:20, y_start=c(1999, 12), y_freq=12, steps_forward=1)
get_new_start(y_start=c(1999, 12), y_freq=52, steps_forward=2)
get_new_start(y_start=c(1999, 12), y_freq=12, steps_forward=13)
get_new_start(y_start=c(1999, 1), y_freq=4, steps_forward=5)
get_new_start(y_start=c(1989, 1), y_freq=4, steps_forward=12+3)
get_new_start(y_start=c(1999, 200), y_freq=250, steps_forward=101)
get_new_start(y_start=c(1999, 200), y_freq=250, steps_forward=101)
get_new_start(y_start=c(1999, 50), y_freq=250, steps_forward=200)
y_start=c(1999, 200)
y_freq=250
steps_forward=101
majors_forward <- steps_forward %/% y_freq
majors_forward
majors_forward <- steps_forward %/% y_freq
minors_forward <- steps_forward %% y_freq
minors_forward
get_new_start(y_start=c(1999, 1), y_freq=4, steps_forward=5)
minors_forward <- steps_forward %% y_freq
minors_forward <- steps_forward %% y_freq
minors_forward
y_start
y_start + c(majors_forward, minors_forward)
steps_forward
y_freq
new_start[2]
new_start <- y_start + c(majors_forward, minors_forward)
new_start
new_start[2] > y_freq
steps_forward %/% y_freq
steps_forward
?%/%
?'%/%'
2 %/% 3
2 %% 3
3 %/% 3
5 %/% 3
new_start[2]
new_start[2] %% y_freq
devtools::load_all()
get_new_start(y_start=c(1999, 200), y_freq=250, steps_forward=101)
get_new_start(y_start=c(2000, 50), y_freq=250, steps_forward=500)
IP <- window(INDPRO, start=c(1951, 8)) # Start time at c(1954, 7), take h + p - 1 months back
IP_filtered <- hfilter(IP, h=24, p=12)
IP_filtered$cycle[c(1, 12, 13, 100)]
IP_filtered$trend[c(1, 22, 23, 200)]
IP_filtered$total[c(1, 32, 33, 300)]
IP_filtered$beta
devtools::document()
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
?diff
devtools::load_all()
data(INDPRO, package="tsfilters")
IP_logdiff <- logdiff(INDPRO)
start(INDPRO)
start(IP_logdiff)
end(INDPRO)
end(IP_logdiff)
plot(IP_logdiff)
IP_logdiff <-logdiff(INDPRO)
IP <- window(INDPRO, start=c(1951, 8)) # Start time at c(1954, 7), take h + p - 1 months back
IP_filtered <- hfilter(IP, h=24, p=12)
end(IP_logdiff)
IP_logdiff[c(1, 12, 13, 100, 700)]
devtools::test()
setwd("~/Documents/tsfilters")
devtools::load_all()
end(INDPRO)
start(INDPRO)
# Industrial production, index 2012=100, monthly, seasonally adjusted, 1919 Jan - 2020 Dec,
# Source: https://fred.stlouisfed.org/series/INDPRO (measures real output - not nominal)
INDPRO <- read.csv("//ad.helsinki.fi/home/s/saviviro/Desktop/SGMVARartikkeli/Data/USdata2020/INDPRO.csv")
# Industrial production, index 2012=100, monthly, seasonally adjusted, 1919 Jan - 2020 Dec,
# Source: https://fred.stlouisfed.org/series/INDPRO
INDPRO <- read.csv("/Users/savi/Desktop/SGMVARartikkeli230221_tyoMUOKATTU/Data/INDPRO.csv")
INDPRO <- ts(INDPRO[,2], start=c(1919, 1), frequency=12)
plot(INDPRO)
usethis::use_data(INDPRO)
usethis::use_data(INDPRO, overwrite = TRUE)
INDPRO
length(INDPRO)
end(INDPRO)
data(INDPRO, package="tsfilters")
end(INDPRO)
# Industrial production, index 2012=100, monthly, seasonally adjusted, 1919 Jan - 2020 Dec,
# Source: https://fred.stlouisfed.org/series/INDPRO
INDPRO <- read.csv("/Users/savi/Desktop/SGMVARartikkeli230221_tyoMUOKATTU/Data/INDPRO.csv")
INDPRO <- ts(INDPRO[,2], start=c(1919, 1), frequency=12)
end(INDPRO)
# Industrial production, index 2012=100, monthly, seasonally adjusted, 1919 Jan - 2020 Dec,
# Source: https://fred.stlouisfed.org/series/INDPRO
INDPRO <- read.csv("/Users/savi/Desktop/SGMVARartikkeli230221_tyoMUOKATTU/USdata2020/INDPRO.csv")
# Industrial production, index 2012=100, monthly, seasonally adjusted, 1919 Jan - 2020 Dec,
# Source: https://fred.stlouisfed.org/series/INDPRO
INDPRO <- read.csv("/Users/savi/Desktop/SGMVARartikkeli230221_tyoMUOKATTU/data/USdata2020/INDPRO.csv")
INDPRO <- ts(INDPRO[,2], start=c(1919, 1), frequency=12)
end(INDPRO)
usethis::use_data(INDPRO, overwrite = TRUE)
data(INDPRO, package="tsfilters")
end(INDPRO)
start(INDPRO)
length(INDPRO)
data(INDPRO, package="tsfilters")
IP_filtered <- hfilter(log(INDPRO), h=24, p=12)
IP_filtered
plot(IP_filtered)
plot(INDPRO)
IP_filtered <- hfilter(INDPRO, h=24, p=12)
IP_filtered
plot(IP_filtered)
IP_filtered <- hfilter(log(INDPRO), h=24, p=12)
IP_filtered
plot(IP_filtered)
data(INDPRO, package="tsfilters")
data(INDPRO, package="tsfilters")
IP_filtered <- hfilter(log(INDPRO), h=24, p=12)
IP_filtered
plot(IP_filtered)
IP_logdiff <- logdiff(INDPRO)
plot(IP_logdiff)
setwd("~/Documents/tsfilters")
devtools::load_all()
INDPRO
IP <- log(INDPRO)
install.packages(mFilter)
install.packages("mFilter")
?mFilter::hpfilter
tmp <- mFilter::hpfilter(IP, freq=1600)
tmp$trend
y <- IP
# Store properties of the original series
y_start <- start(y)
y_freq <- frequency(y)
y <- as.vector(y)
tmp <- mFilter::hpfilter(y, freq=lambda, type="lambda", drift=FALSE)
lambda=1600
tmp <- mFilter::hpfilter(y, freq=lambda, type="lambda", drift=FALSE)
tmp
install.packages(lpirfs)
install.packages("lpirfs")
tmp2 <- lpirfs::hp_filter(x=y, lambda=1600)
tmp2 <- lpirfs::hp_filter(x=as.matrix(y), lambda=1600)
tmp2
tmp2 <- lpirfs::hp_filter(x=as.matrix(y), lambda=1600)
str(tmp2)
tmp2[[1]] - tmp$cycle
tmp2[[2]] - tmp$trend
microbenchmark::microbenchmark(lpirfs::hp_filter(x=as.matrix(y), lambda=1600), ntimes=1)
lpirfs::hp_filter(x=as.matrix(y), lambda=1600)
mFilter::hpfilter(y, freq=lambda, type="lambda", drift=FALSE)
mFilter::hpfilter(y, freq=lambda, type="lambda", drift=FALSE)
lpirfs::hp_filter(x=as.matrix(y), lambda=1600)
length(y_freq)
length(y)
y <- y[1:250]
y
tmp <- lpirfs::hp_filter(x=as.matrix(y), lambda=lambda)
cycle <- tmp[[1]]
trend <- tmp[[2]]
length(cycle)
length(y)
# Run the HP-filter for each t consecutively and take the last observation
cycle <- trend <- numeric(length(y))
cycle
lpirfs::hp_filter(x=as.matrix(y[1:1]), lambda=lambda)
lpirfs::hp_filter(x=as.matrix(y[1]), lambda=lambda)
lpirfs::hp_filter(x=as.matrix(y[2]), lambda=lambda)
lpirfs::hp_filter(x=as.matrix(y[3]), lambda=lambda)
lambda
lpirfs::hp_filter(x=as.matrix(y[10]), lambda=lambda)
lpirfs::hp_filter(x=as.matrix(y[1:2]), lambda=lambda)
lpirfs::hp_filter(x=as.matrix(y[1:3]), lambda=lambda)
lpirfs::hp_filter(x=as.matrix(y[1:2]), lambda=lambda)
for(i1 in 3:length(y)) {
tmp <- lpirfs::hp_filter(x=as.matrix(y[1:i1]), lambda=lambda)
cycle[i1] <- tmp[[1]][i1]
trend[i1] <- tmp[[2]][i1]
}
1001 %% 0
1001 %% 1000
1000 %% 1000
100 %% 1000
cat(paste0(i1, "/", length(y), "\n"))
for(i1 in 3:length(y)) {
if(i1 %% 100 == 0) cat(paste0(i1, "/", length(y), "\n"))
tmp <- lpirfs::hp_filter(x=as.matrix(y[1:i1]), lambda=lambda)
cycle[i1] <- tmp[[1]][i1]
trend[i1] <- tmp[[2]][i1]
}
for(i1 in 3:length(y)) {
if(i1 %% 100 == 0) cat(paste0(i1, "/", length(y), "\b"))
tmp <- lpirfs::hp_filter(x=as.matrix(y[1:i1]), lambda=lambda)
cycle[i1] <- tmp[[1]][i1]
trend[i1] <- tmp[[2]][i1]
}
for(i1 in 3:length(y)) {
if(i1 %% 100 == 0) cat(paste0(i1, "/", length(y)), "\b")
tmp <- lpirfs::hp_filter(x=as.matrix(y[1:i1]), lambda=lambda)
cycle[i1] <- tmp[[1]][i1]
trend[i1] <- tmp[[2]][i1]
}
for(i1 in 3:length(y)) {
if(i1 %% 100 == 0) cat(paste0(i1, "/", length(y)), "\r")
tmp <- lpirfs::hp_filter(x=as.matrix(y[1:i1]), lambda=lambda)
cycle[i1] <- tmp[[1]][i1]
trend[i1] <- tmp[[2]][i1]
}
for(i1 in 3:length(y)) {
if(i1 %% 100 == 0 || i1 == length(y)) cat(paste0(i1, "/", length(y)), "\r")
tmp <- lpirfs::hp_filter(x=as.matrix(y[1:i1]), lambda=lambda)
cycle[i1] <- tmp[[1]][i1]
trend[i1] <- tmp[[2]][i1]
}
devtools::load_all()
IP
IP <- log(INDPRO)[1:500]
plot(IP)
IP <- log(INDPRO)
plot(IP)
tmp <- hpfilter(log(IP))
start(INDPRO)
colMeans(matrix(INDPRO, nrow=3))
IPQ <- log(colMeans(matrix(INDPRO), nrow=3))
IPQ <- log(colMeans(matrix(INDPRO, nrow=3)))
start(INDPRO)
IPQ <- ts(IPQ, start=start(INDPRO), frequency=4)
end(IPQ)
end(INDPRO)
start(IPQ)
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
plot(IPQ_hp$cycle)
plot(IPQ_hp$trend)
?lpirfss::hp_filter
?lpirfs::hp_filter
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
devtools::load_all()
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
devtools::load_all()
plot(IPQ_hp)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
IPQ_hp
devtools::load_all()
IPQ_hp
length(IPQ)
devtools::load_all()
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
length(IPQ)
devtools::load_all()
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
IPQ_hp
length(IPQ_hp$cycle)
devtools::load_all()
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
IPQ_hp
length(IPQ_hp$cycle)
devtools::load_all()
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
IPQ_hp
plot(IPQ_hp)
plot(IPQ_hp)
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="two-sided")
plot(IPQ_hp)
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="two-sided")
IPQ_hp
plot(IPQ_hp)
IPQ_hp <- hpfilter(IPQ, lambda=1600, type="one-sided")
plot(IPQ_hp)
IPQ_hp
# Two-sided
IPQ_hp2 <- hpfilter(IPQ, lambda=1600, type="two-sided")
plot(IPQ_hp2)
IPQ_hp2
devtools::test()
devtools::test()
devtools::load_all()
devtools::test()
data(INDPRO, package="tsfilters")
IP <- window(INDPRO, start=c(1951, 8)) # Start time at c(1954, 7), take h + p - 1 months back
IP_filtered <- hfilter(IP, h=24, p=12)
# p + h = 36, new start = c(1954, 7)
start(IP_filtered$cycle)
start(IP_filtered$trend)
end(IP_filtered$trend)
IP_filtered$cycle[c(1, 12, 13, 100)]
IP_filtered$trend[c(1, 22, 23, 200)]
IP_filtered$total[c(1, 32, 33, 300)]
IP_filtered$beta
IP_logdiff[c(1, 12, 13, 100, 700)]
devtools::test()
devtools::document()
devtools::load_all()
